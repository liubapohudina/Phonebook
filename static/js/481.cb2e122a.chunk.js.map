{"version":3,"file":"static/js/481.cb2e122a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Form/form.module.css?cfaa","redux/contacts/contacts-selector.js","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Form/contactsList.module.css?d795","components/Form/ContacsList.jsx","components/Form/FilterSearch.jsx","Pages/PhonebookList/PhonebookList.jsx","webpack://react-homework-template/./src/components/Form/title.module.css?00f8","components/Form/Title.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"form_input__cqeL6\",\"p\":\"form_p__75oS7\",\"infoForUser\":\"form_infoForUser__zOjDw\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = store => store.contacts.items;\n\n\nconst selectContactsAll = store => store.contacts;\nconst selectFilter = store => store.filter;\n\n\nexport const selectFilterContacts = createSelector(\n  [selectContactsAll, selectFilter],\n    (contacts, filter) => {\n    if (!filter || typeof filter !== 'string') {\n      return contacts;\n    }\n\n    const normalizedFilter = filter.trim().toLowerCase();\n\n    const filteredContacts = contacts.items.filter(({ name }) => {\n      const normalizedName = (name || '').trim().toLowerCase();\n      return normalizedName.includes(normalizedFilter);\n    });\n    \n    return filteredContacts;\n  }\n);\n\n// export const selectFilterContacts = store => {\n//     const { contacts, filter } = store;\n\n//   if (!filter || typeof filter !== 'string') {\n//         return contacts;\n//     }\n\n//     const normalizedFilter = filter.trim().toLowerCase();\n\n//     const filteredContacts = contacts.items.filter(({ name }) => {\n//         const normalizedName = (name || '').trim().toLowerCase();\n//         return normalizedName.includes(normalizedFilter);\n//     });\n//     return filteredContacts;\n// };","import React from \"react\";\nimport Button from \"./Button\";\nimport styles from './form.module.css';\n//import PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { fetchAddContacts } from \"../../redux/contacts/contacts-operations\";\nimport { toast } from \"react-toastify\";\nimport { selectContacts } from \"../../redux/contacts/contacts-selector\";\n\n\n\nconst Form = () => {\n  const contactsAll = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const [values, setValues] = useState({});\n\n\n  const onChangeInput = (event) => {\n  const { name, value } = event.target; \n  setValues((prevValues) => ({\n    ...prevValues,\n    [name]: value,\n  }));\n}\n\n\n\n  const onClickSubmit = (event) => {\n    event.preventDefault(); \n    const { name } = values;\n    const isExist = contactsAll.findIndex(el => el.name.toLocaleLowerCase().trim() === name.toLocaleLowerCase().trim());\n\n    if (isExist >= 0) {\n      toast.warning(`Contact ${name} is already exists!`);\n      return;\n    }\n    dispatch(fetchAddContacts(values));\n    if (contactsAll.length > 0) {\n      event.currentTarget.reset()\n    }\n    }\n    \n  \n\n \n    return (\n        <form className={styles.form} onSubmit={onClickSubmit}>\n            <label htmlFor=\"name\">Name</label>\n            <input className={styles.input} onChange={onChangeInput} type=\"text\" name=\"name\" id=\"username\"  required placeholder=\"Please, enter data of contact\" />\n            \n            <label htmlFor=\"tel\">Phone number </label>\n            <input className={styles.input} onChange={onChangeInput} type=\"tel\" name=\"phone\" id=\"tel\" required placeholder=\"Please, enter a phone number\"/>\n           \n            <Button type=\"submit\" text=\"Add contact\"  />\n        </form>\n    )\n}\n\nexport default Form;\n\n// Form.propTypes = {\n//     onChangeInput: PropTypes.func,\n//     onClickSubmit: PropTypes.func,\n// }","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"contactsList_contactsList__DGG6L\",\"itemContacts\":\"contactsList_itemContacts__PtrNV\",\"contactInfo\":\"contactsList_contactInfo__0aqg3\",\"link\":\"contactsList_link__ZZsC4\",\"btn\":\"contactsList_btn__1i6Qa\"};","import React from \"react\";\nimport styles from './contactsList.module.css';\nimport PropTypes from \"prop-types\";\nimport { Loader } from \"./Loader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilterContacts} from '../../redux/contacts/contacts-selector';\nimport { fetchContacts, fetchDeleteContacts } from \"../../redux/contacts/contacts-operations\";\nimport { useEffect } from \"react\";\n\n\nconst ContactList = () => {\n  const { items, isLoading } = useSelector(selectFilterContacts);\n \n  \n  const filteredContacts = useSelector(selectFilterContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n  const onClickDelete = (id) => {\n    dispatch(fetchDeleteContacts(id));\n  }\n\nconst elements = items ? (\n    items.map(item => (\n      <li className={styles.itemContacts} key={item.id}>\n        <p className={styles.contactInfo}>{item.name} <a className={styles.link} href={`tel:${item.phone}`}>{item.phone}</a></p>\n        <button id={item.id} className={styles.btn} onClick={() => onClickDelete(item.id)} type=\"button\">Delete</button>\n  </li>\n    ))\n) : (\n    filteredContacts.map(item => (\n        <li className={styles.itemContacts} key={item.id}>\n            <p className={styles.contactInfo}>{item.name}  {item.phone}</p>\n        <button id={item.id} className={styles.btn} onClick={() => onClickDelete(item.id)} type=\"button\">Delete</button> \n        </li>\n    ))\n);\n\n  \n\n  return (\n  <>\n      {isLoading && <Loader />}\n      <div className=\"contactsList\">\n        <ul className={styles.contactsList}>{elements}</ul>\n      </div>\n    </>\n  );\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.array,\n  onClickDelete: PropTypes.func,\n};\n","import Title from './Title';\nimport styles from './form.module.css';\nimport PropTypes from \"prop-types\";\nimport { addFilter } from '../../redux/filter/filter-slice';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contacts-selector';\n\nconst Filter = ({children}) => {\n  const items = useSelector(selectContacts);\n  const isItems = items.length;\n\n  const dispatch = useDispatch();\n  const onChangeFilter = (event) => {\n    const filterValue = event.target.value\n    const action = addFilter({filter: filterValue})\n    dispatch(action)\n  }\n\n return (\n  <section>\n    {Boolean(isItems) ? (\n      <div className=\"filter\">\n        <Title title='Contacts' />\n         <p className={styles.p}>Find contacts by name</p>\n         <form>\n           <input onChange={onChangeFilter} className={styles.input} name=\"filter\" type=\"text\" placeholder='Enter name'/>\n           </form>\n      </div>\n    ) : (\n      <p className={styles.infoForUser}>You don't have any contacts yet.</p>\n     )}\n     {children}\n  </section>\n);\n\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n    onChangeInput: PropTypes.func,\n}","import Form from '../../components/Form/Form';\nimport Title from \"../../components/Form/Title\";\n\nimport ContactList from \"../../components/Form/ContacsList\";\nimport Filter from \"../../components/Form/FilterSearch\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst PhonebookList = () => {\n    return (\n          <main className='container'>\n      <ToastContainer />\n     <Title title=\"Phonebook\">\n        <Form />\n      </Title> \n      <Filter>\n        <ContactList />\n      </Filter>  \n    </main>\n    )\n}\n\nexport default PhonebookList;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"title_title__3H47j\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from './title.module.css';\n\n\n\nconst Title = ({title, children}) => {\n    return (\n        <section>\n        <h2 className={styles.title}>{title}</h2>\n        {children}\n        </section>     \n    )\n}\n\nexport default Title;\n\nTitle.propTypes = {\n    title: PropTypes.string.isRequired,\n}"],"names":["selectContacts","store","contacts","items","selectFilterContacts","createSelector","filter","normalizedFilter","trim","toLowerCase","_ref","name","includes","contactsAll","useSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","values","setValues","onChangeInput","event","_event$target","target","value","prevValues","_objectSpread","_defineProperty","_jsxs","className","styles","onSubmit","preventDefault","findIndex","el","toLocaleLowerCase","toast","concat","fetchAddContacts","length","currentTarget","reset","children","_jsx","htmlFor","onChange","type","id","required","placeholder","Button","text","_useSelector","isLoading","filteredContacts","useEffect","fetchContacts","onClickDelete","fetchDeleteContacts","elements","map","item","href","phone","onClick","_Fragment","Loader","isItems","Boolean","Title","title","filterValue","action","addFilter","ToastContainer","Form","Filter","ContactList"],"sourceRoot":""}